#!/bin/bash
#
# Copyright:	(C) 2007 Kel Modderman <kel@otaku42.de>
# License:	GPLv2
#
# Provide dialog frontend to ndis driver installation via ssft

###---------------------------------------------------------------###

error() {
	local ETIT="Error"
	local EMSG="An unknown error has occurred, aborting"
	local ERET=999

	case "${1}" in
		ssft)
			echo "ssft not installed"
			echo "------------------"
			echo ""
			echo "The 'ssft' package must be installed."
			echo ""
			echo "Aborting."
			echo ""
			exit 1
			;;
		root)
			ETIT="must be root!"
			EMSG="You must be root to use this program, aborting."
			ERET=2
			;;
		ndis)
			ETIT="ndiswrapper not found!"
			EMSG="The 'ndiswrapper' command was not found in PATH, aborting."
			ERET=3
			;;
		kmod)
			ETIT="ndiswrapper module not installed"
			EMSG="The 'ndiswrapper' kernel module is not installed, aborting."
			ERET=4
			;;
		driv)
			ETIT="driver installation failed"
			EMSG="Failed to install a ndis driver, aborting."
			ERET=5
			;;
		regx)
			ETIT="regexp error"
			EMSG="Unable to determine ndis driver name with regular expression"
			ERET=6
			;;
		nodo)
			ETIT="driver already installed"
			EMSG="The driver you chose is already installed, aborting."
			ERET=7
			;;
		undo)
			ETIT="ndiswrapper failed"
			EMSG="ndiswrapper failed to remove driver that failed installation, aborting."
			ERET=8
			;;
		used)
			ETIT="ndiswrapper in use"
			EMSG="The ndiswrapper kernel module is already being used, aborting."
			ERET=9
			;;
		abort)
			ETIT="aborting configuration"
			EMSG="Aborting ndiswrapper configuration"
			ERET=255
			;;
	esac

	ssft_display_error "${ETIT}" "${EMSG}"

	exit "${ERET}"
}

usage() {
	cat <<EOF
Navigate the file selection dialog to a directory
containing Windows drivers for your device and
select the .inf or .INF file.
EOF
}

warning() {
	cat <<EOF
The ndiswrapper module is in use, do you want to 
reconfigure the driver?

WARNING: this could break your current network
connection or cause instability in some cases!
EOF
}

###---------------------------------------------------------------###

source ssft.sh					|| error "ssft"

# the dialog frontend is woeful for this purpose
[[ ${DISPLAY} ]] || SSFT_FRONTEND=text
: ${SSFT_FRONTEND:=$(ssft_choose_frontend)}

! ((UID))					|| error "root"
which ndiswrapper >/dev/null			|| error "ndis"
[[ -f $(modinfo -F filename ndiswrapper) ]]	|| error "kmod"

###---------------------------------------------------------------###

while true; do
	NDIS_INSTALLED_DRIVERS=( $(ndiswrapper -l | awk '/^.+[ \t]*:.*/{ print $1 }') )

	if [[ ${NDIS_INSTALLED_DRIVERS[@]} ]]; then
		while [[ ${#NDIS_INSTALLED_DRIVERS[@]} -gt 0 ]]; do
			if ssft_select_single "Install or Remove" \
				"Would you like to install or remove ndiswrapper drivers?" \
				"Install" "Remove"; then
				case "${SSFT_RESULT}" in
					Install)
						break
						;;
					Remove)
						if ssft_select_multiple "Select drivers" \
							"Select the drivers you would like to remove." \
							${NDIS_INSTALLED_DRIVERS[@]}; then
							if [[ ${SSFT_RESULT} ]]; then
								for driver in ${SSFT_RESULT}; do
									ndiswrapper -r "${driver}" || error "undo"
								done
								ndiswrapper -ma
							fi
						else
							error "abort"
						fi
						continue 2
						;;
				esac
			else
				error "abort"
			fi
		done
	fi

	if lsmod | grep -q -w ndiswrapper; then
		if ssft_yesno "unload ndiswrapper driver" "$(warning)"; then
			modprobe -r ndiswrapper
		else
			error "used"
		fi
	fi

	ssft_display_message "Usage" "$(usage)"

	unset NDIS_DRIVER

	if ssft_file_selection "Select driver" "Select Windows .inf driver to install."; then
		case "${SSFT_RESULT}" in
			*\.[Ii][Nn][Ff])
				NDIS_DRIVER="${SSFT_RESULT}"
				;;
			*)
				ssft_display_error "Invalid driver" \
					"Invalid Windows driver filename. Not an .inf or .INF file."
				ssft_yesno "try again" \
					"Would you like another attempt at configuring ndiswrapper?" && continue
				error "abort"
				;;
		esac
	else
		error "abort"
	fi

	[[ ${NDIS_DRIVER} =~ '^(.*/)?(.+)\.[Ii][Nn][Ff]$' ]] || error "regx"
	NDIS_DRIVER_NAME=$(tr 'A-Z' 'a-z' <<< ${BASH_REMATCH[2]})

	if [[ " ${NDIS_INSTALLED_DRIVERS[@]} " == *" ${NDIS_DRIVER_NAME} "* ]]; then
		if ssft_yesno "driver already installed" \
			"The driver you chose is already installed, return to main menu?"; then
			continue
		else
			error "abort"
		fi
	fi

	NDIS_INSTALL_RESULT=$(ndiswrapper -i ${NDIS_DRIVER} 2>&1)
	if [[ ${?} -eq 0 ]]; then
		NDIS_MODPROBE_RESULT=$(modprobe ndiswrapper 2>&1)
		if [[ ${?} -eq 0 ]]; then
			ndiswrapper -ma
			ssft_display_message "ndiswrapper installed" \
				"The ndiswrapper kernel module is configured and ready to use."
			break
		else
			ssft_display_emsg "modprobe failed" "${NDIS_MODPROBE_RESULT}"

			if [[ -d "/etc/ndiswrapper/${NDIS_DRIVER_NAME}" ]]; then
				ndiswrapper -r "${NDIS_DRIVER_NAME}" || error "undo"
			fi

			ssft_yesno "try again" \
				"Would you like another attempt at configuring ndiswrapper?" && continue
			error "abort"
		fi
	else
		ssft_display_emsg "ndiswrapper failed" "${NDIS_INSTALL_RESULT}"

		if [[ -d "/etc/ndiswrapper/${NDIS_DRIVER_NAME}" ]]; then
			ndiswrapper -r "${NDIS_DRIVER_NAME}" || error "undo"
		fi

		ssft_yesno "try again" \
			"Would you like another attempt at configuring ndiswrapper?" && continue
		error "abort"
	fi		
done

exit 0
